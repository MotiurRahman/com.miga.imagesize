/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.miga.imagesize;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import android.graphics.BitmapFactory;
import org.appcelerator.kroll.KrollDict;
import org.appcelerator.titanium.io.TiBaseFile;
import org.appcelerator.titanium.io.TiFileFactory;
import android.os.ParcelFileDescriptor;
import android.net.Uri;
import java.io.FileNotFoundException;
import org.appcelerator.titanium.util.TiUIHelper;
import android.graphics.Bitmap;
import java.io.IOException;
import java.io.File;

@Kroll.module(name="TiImagesize", id="com.miga.imagesize")
public class TiImagesizeModule extends KrollModule
{

	// Standard Debugging variables
	private static final String LCAT = "TiImagesizeModule";
	private static final boolean DBG = TiConfig.LOGD;
	private String imgUrl = "";
	private String imgId = "";

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;

	public TiImagesizeModule()
	{
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		// put module init code that needs to run when the application is created
	}


	// Properties
	@Kroll.method
	public void getSize(KrollDict d){
		super.processProperties(d);
		String imageSrc="";
		if (d.containsKey("image")) {
			imageSrc = d.getString("image");
		}
		if (d.containsKey("id")) {
			imgId = d.getString("id");
		}

		imgUrl = resolveUrl(null, imageSrc);
		KrollDict kd = new KrollDict();
		BitmapFactory.Options options = new BitmapFactory.Options();

		try {
			TiBaseFile file = TiFileFactory.createTitaniumFile(new String[] {imgUrl}, false);
			options.inJustDecodeBounds = true;
			if (imgUrl.contains("http:") || imgUrl.contains("https:")) {

				Thread thread = new Thread(new Runnable() {
					@Override
					public void run() {
						try  {
							BitmapFactory.Options options = new BitmapFactory.Options();
							BitmapFactory.decodeStream(new java.net.URL(imgUrl).openStream(), null,options);
							int width = options.outWidth;
							int height = options.outHeight;

							KrollDict kd = new KrollDict();
							kd.put("id", imgId);
							kd.put("width", width);
							kd.put("height", height);
							kd.put("image",imgUrl);
							kd.put("error",false);
							fireEvent("imageSize", kd);
						} catch (Exception e) {
							e.printStackTrace();
						}
					}
				});

				thread.start();

			} else {
				BitmapFactory.decodeStream(file.getInputStream(), null,options);
				int width = options.outWidth;
				int height = options.outHeight;

				kd.put("id", imgId);
				kd.put("width", width);
				kd.put("height", height);
				kd.put("image",imgUrl);
				kd.put("error",false);
				fireEvent("imageSize", kd);
			}
		} catch (IOException e) {
			Log.e("ImageSize", "File not found");
			kd.put("id", imgId);
			kd.put("width", 0);
			kd.put("height", 0);
			kd.put("error",true);
			fireEvent("imageSize", kd);
		}

	}
}
